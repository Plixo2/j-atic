In := top

top := struct top | logic top | "eof"

struct := "struct"? ID "{"? declarationCompound "}"?
declarationCompound := declaration declarationCompound ||
declaration := Type ID


logic := "logic"? Id "{"? logicCompound "}"?
logicCompound := logicSpace logicCompound | logicSpace ||
logicSpace := "fn"? id "("? inputList ")"? "->"? Type statement
inputList := inputTerm ","? inputList | inputTerm | |
inputTerm := Type id


//statements
statement := blockStatement | assignmentStatement | declarationStatement

assignmentStatement := id "="? expression
declarationStatement := type id "="? expression

blockStatement := "{"? statementCompound "}"?
statementCompound := statement statementCompound ||

//todo
//branchStatement := "if"
//evaluationStatement := expression


Type := ID
ID := "Keyword"


expression := boolArithmetic
factor := "("? expression ")"? | unary | not | number | boolLiteral
number := "number"
boolLiteral := "false" | "true"

unary :=  neg_unary | pos_unary
neg_unary := "-"? factor
pos_unary := "+"? factor
not :=  "!"? factor

boolArithmetic := comparisonArithmetic boolArithmeticFunc boolArithmetic | comparisonArithmetic
comparisonArithmetic := arithmetic comparisonArithmeticFunc comparisonArithmetic | arithmetic
arithmetic := term arithmeticFunc arithmetic | term
term := factor termFunc term | factor
termFunc := "*" | "/"
arithmeticFunc := "+" | "-"
comparisonArithmeticFunc := ">" | ">=" | "<" | "<=" | "==" | "!="
boolArithmeticFunc := "&&" | "||"