In := logic

logic := "logic"? Id "{"? logicCompound "}"?
logicCompound := logicSpace logicCompound | logicSpace
logicSpace := "fn"? id "("? inputList ")"? "->"? Type functionLogic
inputList := Type id ","? inputList | Type id | |
functionLogic := "{"? statement "}"?

statement := Type ID "="? expression

Type :=  ID
ID := "Keyword"


expression := boolArithmetic
factor := "("? expression ")"? | unary | not | number | "false" | "true"
number := "number"

unary :=  neg_unary | pos_unary
neg_unary := "-"? factor
pos_unary := "+"? factor
not :=  "!"? factor

boolArithmetic := comparisonArithmetic boolArithmeticFunc boolArithmetic | comparisonArithmetic
comparisonArithmetic := arithmetic comparisonArithmeticFunc comparisonArithmetic | arithmetic
arithmetic := term arithmeticFunc arithmetic | term
term := factor termFunc term | factor
termFunc := "*" | "/"
arithmeticFunc := "+" | "-"
comparisonArithmeticFunc := ">" | ">=" | "<" | "<=" | "==" | "!="
boolArithmeticFunc := "&&" | "||"